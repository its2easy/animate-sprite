{"version":3,"file":"animate-sprite.esm.min.js","sources":["../src/animate-sprite.js","../src/merge-objects.js"],"sourcesContent":["import mergeObjects from './merge-objects'\r\n/**\r\n *\r\n * @param {Element|HTMLElement} node - DOM Node\r\n * @param {Object} options - Options\r\n * @param {Number} options.width - Width of one frame\r\n * @param {Number} options.height - Height of one frame\r\n * @param {Number} options.frames - Number of frames\r\n * @param {Number|Boolean} [options.cols=false] - Number of cols if more than 1 row\r\n * @param {Boolean} [options.loop=false] - Whether to start a new cycle at the end\r\n * @param {Boolean} [options.reverse=false] - Reverse direction\r\n * @param {Boolean} [options.autoplay=false] - Autoplay\r\n * @param {Number|Boolean} [options.frameTime] - ms, time between frames\r\n * @param {Number|Boolean} [options.duration] - ms, total time, alternative to frameTime\r\n * @param {Number|Boolean} [options.fps = 24] - fps, alternative to frameTime\r\n * @param {Number|Boolean} [options.draggable = false] - Draggable by mouse or touch\r\n * @returns {Object}\r\n * @example\r\n *\r\n * var sprite = animateSprite.init( document.getElementById('sprite'),\r\n *             {\r\n *                 width: 720,\r\n *                 height: 405,\r\n *                 cols: 5,\r\n *                 frames: 20,\r\n *                 frameTime: 45,\r\n *                 loop: true\r\n *              }readme.md\r\n */\r\nexport function init(node, options = {}) {\r\n    if ( !(node instanceof HTMLElement || node instanceof Element || node instanceof HTMLDocument)) {\r\n        throw new TypeError('Node is required');\r\n    }\r\n\r\n    // Setup settings\r\n    let inlineSettings = fillInlineSettings( node,\r\n        ['width', 'height', 'frames', 'cols', 'loop', 'frameTime', 'duration', 'fps', 'reverse', 'autoplay', 'draggable']\r\n    );\r\n\r\n    let defaultSettings = {\r\n        width: 100,\r\n        height: 100,\r\n        frames: 24,\r\n        cols: false,\r\n        loop: false,\r\n        frameTime: false,\r\n        duration: false,\r\n        fps: 24,\r\n        reverse: false,\r\n        autoplay: false,\r\n        draggable: false\r\n    }\r\n    //let settings = Object.assign(defaultSettings, options, inlineSettings);\r\n    let settings = mergeObjects(defaultSettings, options, inlineSettings);\r\n\r\n    let currentFrame = 1,\r\n        isAnimating = false,\r\n        duration, // One animation cycle duration\r\n        lastUpdate,\r\n        isSwiping = false,\r\n        swipeObject = {},\r\n        swipeThreshold,\r\n        swipePixelsCorrection = 0,\r\n        nodeWidth,\r\n        nodeHeight,\r\n        widthHeightRatio,\r\n        bgWidth,\r\n        bgHeight,\r\n        plugin = {}; // Public object\r\n\r\n    const swipeEvents = ['mousedown', 'mousemove', 'mouseup', 'touchstart', 'touchmove', 'touchend', 'touchcancel'];\r\n\r\n    // Private functions\r\n    function animateSprite(frame) {\r\n        node.style.backgroundPosition = calculatePosition(frame);\r\n    }\r\n    function changeFrame(frame){\r\n        if ( frame === currentFrame ) return;\r\n        if ( !isOutOfRange(frame) ){ // Valid frame\r\n            animateSprite(frame);\r\n            checkForEvents(currentFrame, frame);\r\n            currentFrame = frame;\r\n        } else { // Out of range\r\n            if (settings.loop) { // Loop, change frame and continue\r\n                changeFrame( Math.abs(Math.abs(frame) - settings.frames) ); // Correct frame\r\n            } else { // No loop, stop playing\r\n                plugin.stop();\r\n                if (frame < 1) changeFrame(1);\r\n                else changeFrame(settings.frames);\r\n            }\r\n        }\r\n    }\r\n    function getNextFrame(deltaFrames, reverse){\r\n        if ( reverse === undefined ) reverse = settings.reverse;\r\n        return  (reverse) ? currentFrame - deltaFrames : currentFrame + deltaFrames;\r\n    }\r\n    function isOutOfRange(frame){\r\n        return ( frame <= 0 || frame > settings.frames );\r\n    }\r\n    function calculatePosition(frame){\r\n        let xPadding,\r\n            yPadding = 0;\r\n        if ( !settings.cols ){ // Single row sprite\r\n            xPadding = (frame - 1) * nodeWidth;\r\n        } else { // Multiline sprite\r\n            xPadding = ( ( (frame - 1) % settings.cols)  ) * nodeWidth;\r\n            yPadding = Math.floor( (frame - 1) / settings.cols ) * nodeHeight;\r\n        }\r\n        return `-${xPadding}px -${yPadding}px`;\r\n    }\r\n    function calculateDuration(frameTime, duration, fps){\r\n        if (frameTime) return frameTime * settings.frames;\r\n        else if (duration) return duration;\r\n        else return  ( settings.frames / fps ) * 1000;\r\n    }\r\n    function animate(time){\r\n        const progress = ( time - lastUpdate ) / duration;\r\n        //console.log(time - lastUpdate);\r\n        const deltaFrames = progress * settings.frames; // Ex. 0.45 or 1.25\r\n        // A place for timing function\r\n\r\n        if ( deltaFrames >= 1) { // Animate only if we need to update 1 frame or more\r\n            changeFrame(getNextFrame( Math.floor(deltaFrames) ));\r\n            lastUpdate = performance.now();\r\n        }\r\n        if ( isAnimating ) requestAnimationFrame(animate);\r\n    }\r\n\r\n    function calculateSizes(){\r\n        const wasAnimating = isAnimating;\r\n        plugin.stop();\r\n        widthHeightRatio = settings.width / settings.height;\r\n        nodeWidth = node.offsetWidth;\r\n        nodeHeight = nodeWidth / widthHeightRatio;\r\n        node.style.height = nodeHeight + \"px\";\r\n        swipeThreshold = nodeWidth / settings.frames;\r\n        bgWidth =  ( !settings.cols )\r\n            ? settings.frames * nodeWidth\r\n            : settings.cols * nodeWidth;\r\n        bgHeight = ( !settings.cols )\r\n            ? nodeHeight\r\n            : Math.ceil( settings.frames / settings.cols ) * nodeHeight;\r\n        node.style.backgroundSize = `${bgWidth}px ${bgHeight}px`;\r\n        if (wasAnimating) plugin.play();\r\n        else changeFrame(1);\r\n    }\r\n    function checkForEvents(prevFrame, nextFrame) {\r\n        if ( (prevFrame === settings.frames - 1) && (nextFrame === settings.frames) ){\r\n            node.dispatchEvent( new Event('sprite:last-frame') );\r\n        } else if ( (prevFrame === 2) && (nextFrame === 1) ) {\r\n            node.dispatchEvent( new Event('sprite:first-frame') );\r\n        }\r\n    }\r\n    function initPlugin(){\r\n        duration = calculateDuration(settings.frameTime, settings.duration, settings.fps);\r\n        lastUpdate = performance.now();\r\n\r\n        calculateSizes();\r\n        addResizeHandler(calculateSizes);\r\n\r\n        if ( settings.autoplay ) plugin.play();\r\n        if ( settings.draggable ) {\r\n            setupSwipeEvents(node, swipeHandler, swipeEvents);\r\n            node.style.cursor = 'grab';\r\n        }\r\n    }\r\n\r\n    //===================== SWIPE ROTATION ====================//\r\n    function swipeHandler(event){\r\n        let touches;\r\n        if ( event.touches !== undefined && event.touches.length ) touches = event.touches;\r\n        swipeObject.curX = (touches) ? touches[0].pageX : event.clientX;\r\n        swipeObject.curY = (touches) ? touches[0].pageY : event.clientY;\r\n\r\n        switch (event.type){\r\n            case 'mousedown':\r\n            case 'touchstart':\r\n                if ( event.type === 'touchstart') event.preventDefault();\r\n                document.addEventListener('mouseup', swipeHandler);\r\n                document.addEventListener('mousemove', swipeHandler);\r\n                swipeStart();\r\n                break;\r\n            case 'mousemove':\r\n            case 'touchmove':\r\n                if ( event.type === 'touchmove') event.preventDefault();\r\n                if ( isSwiping ) swipeMove();\r\n                break;\r\n            case 'mouseup':\r\n            case 'touchend':\r\n            case 'touchcancel':\r\n                if ( event.type === 'touchend' || event.type === 'touchcancel') event.preventDefault();\r\n                document.removeEventListener('mouseup', swipeHandler);\r\n                document.removeEventListener('mousemove', swipeHandler);\r\n                swipeEnd();\r\n                break;\r\n        }\r\n    }\r\n    function swipeStart(){\r\n        isAnimating = false;\r\n        isSwiping = true;\r\n        node.style.cursor = 'grabbing';\r\n        document.body.style.cursor = 'grabbing';\r\n        swipeObject.prevX = swipeObject.curX;\r\n        swipeObject.prevY = swipeObject.curY;\r\n    }\r\n    function swipeMove(){\r\n        const direction = swipeDirection();\r\n        swipeObject.prevY = swipeObject.curY; // Update Y to get right angle\r\n\r\n        const swipeLength = Math.round( Math.abs(swipeObject.curX - swipeObject.prevX) ) + swipePixelsCorrection;\r\n        if ( swipeLength <= swipeThreshold) return; // Ignore if less than 1 frame\r\n        if ( direction !== 'left' && direction !== 'right') return; // Ignore vertical directions\r\n        swipeObject.prevX = swipeObject.curX;\r\n\r\n        const progress = swipeLength / nodeWidth;\r\n        const deltaFrames = Math.floor(progress * settings.frames);\r\n        // Add pixels to the next swipeMove if frames equivalent of swipe is not an integer number,\r\n        // e.g one frame is 10px, swipeLength is 13px, we change 1 frame and add 3px to the next swipe,\r\n        // so fullwidth swipe is always rotate sprite for 1 turn\r\n        swipePixelsCorrection = swipeLength - (swipeThreshold * deltaFrames);\r\n        changeFrame(getNextFrame( deltaFrames, (direction !== 'left') ));\r\n    }\r\n    function swipeEnd(){\r\n        //if ( swipeObject.curX === undefined ) return; // there is no x coord on touch end\r\n        swipeObject = {};\r\n        isSwiping = false;\r\n        node.style.cursor = 'grab';\r\n        document.body.style.cursor = 'default';\r\n    }\r\n    function swipeDirection(){\r\n        let xDist, yDist, r, swipeAngle;\r\n        xDist = swipeObject.prevX - swipeObject.curX;\r\n        yDist = swipeObject.prevY - swipeObject.curY;\r\n        r = Math.atan2(yDist, xDist);\r\n        swipeAngle = Math.round(r * 180 / Math.PI);\r\n        if (swipeAngle < 0) swipeAngle = 360 - Math.abs(swipeAngle);\r\n        if ( (swipeAngle >= 0 && swipeAngle <= 60) || (swipeAngle <= 360 && swipeAngle >= 300 )) return 'left';\r\n        else if ( swipeAngle >= 120 && swipeAngle <= 240 ) return 'right';\r\n        else if ( swipeAngle >= 241 && swipeAngle <= 299 ) return 'bottom';\r\n        else return 'up';\r\n    }\r\n    //===================== END SWIPE ====================//\r\n\r\n    // Public API\r\n    plugin.play = function(){\r\n        if ( isAnimating ) return;\r\n        isAnimating = true;\r\n        lastUpdate = performance.now();\r\n        requestAnimationFrame(animate);\r\n        return this;\r\n    }\r\n    plugin.stop = function(){\r\n        isAnimating = false;\r\n        return this;\r\n    }\r\n    plugin.toggle = function(){\r\n        if ( !isAnimating ) plugin.play();\r\n        else plugin.stop();\r\n        return this;\r\n    }\r\n    plugin.next = function(){\r\n        plugin.stop();\r\n        changeFrame( currentFrame + 1 );\r\n        return this;\r\n    }\r\n    plugin.prev = function(){\r\n        plugin.stop();\r\n        changeFrame( currentFrame - 1 );\r\n        return this;\r\n    }\r\n    plugin.reset = function(){\r\n        plugin.stop();\r\n        changeFrame(1);\r\n        return this;\r\n    }\r\n    plugin.setFrame = function(frame){\r\n        plugin.stop();\r\n        changeFrame(frame);\r\n        return this;\r\n    }\r\n    plugin.setReverse = function(reverse = true){\r\n        settings.reverse = !!reverse;\r\n        return this;\r\n    }\r\n    plugin.getCurrentFrame = () => currentFrame;\r\n    plugin.isAnimating = () => isAnimating;\r\n    plugin.setOption = function (option, value) {\r\n        if ( option === \"frameTime\" || option === \"duration\" || option === \"fps\" ) {\r\n            settings.frameTime = settings.duration = settings.fps = false; // Reset\r\n            settings[option] = +value;\r\n            duration = calculateDuration(settings.frameTime, settings.duration, settings.fps); // Recalculate\r\n            if ( isAnimating ) {\r\n                plugin.stop();\r\n                plugin.play();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    plugin.destroy = function () {\r\n        removeSwipeEvents( node, swipeHandler, swipeEvents );\r\n        removeResizeHandler( calculateSizes );\r\n    }\r\n\r\n    initPlugin();\r\n    return plugin;\r\n}\r\n\r\n/**\r\n * Returns object with data-* settings\r\n *\r\n * @param {HTMLElement} node\r\n * @param {Array<string>} list\r\n * @returns {Object}\r\n */\r\nfunction fillInlineSettings(node, list) {\r\n    let result = {};\r\n    list.forEach( (value) => {\r\n        if (typeof node.dataset[value.toLowerCase()] !== 'undefined') {\r\n            let inlineValue = node.dataset[value.toLowerCase()];\r\n            if ( inlineValue === \"true\" || inlineValue === '') inlineValue = true;\r\n            else if ( inlineValue === \"false\") inlineValue = false;\r\n            result[value] = inlineValue;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nfunction addResizeHandler(cb) {\r\n    window.addEventListener(\"resize\", cb); // todo add debouncing\r\n}\r\nfunction removeResizeHandler(cb) {\r\n    window.removeEventListener(\"resize\", cb);\r\n}\r\n\r\nfunction setupSwipeEvents(node, swipeHandler, swipeEvents) {\r\n    swipeEvents.forEach( (value) => {\r\n        node.addEventListener(value, swipeHandler);\r\n    })\r\n}\r\nfunction removeSwipeEvents(node, swipeHandler, swipeEvents) {\r\n    swipeEvents.forEach( (value) => {\r\n        node.removeEventListener(value, swipeHandler);\r\n    })\r\n}\r\n\r\n\r\n","/**\r\n * Object.assign polyfill\r\n *\r\n * @param {Object} target\r\n * @param {Object} firstSource\r\n * @returns {Object}\r\n */\r\nexport default function(target, firstSource) {\r\n    if (target === undefined || target === null) {\r\n        throw new TypeError('Cannot convert first argument to object');\r\n    }\r\n\r\n    var to = Object(target);\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        var nextSource = arguments[i];\r\n        if (nextSource === undefined || nextSource === null) {\r\n            continue;\r\n        }\r\n\r\n        var keysArray = Object.keys(Object(nextSource));\r\n        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\r\n            var nextKey = keysArray[nextIndex];\r\n            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\r\n            if (desc !== undefined && desc.enumerable) {\r\n                to[nextKey] = nextSource[nextKey];\r\n            }\r\n        }\r\n    }\r\n    return to;\r\n}"],"names":["init","node","options","HTMLElement","Element","HTMLDocument","TypeError","duration","lastUpdate","swipeThreshold","nodeWidth","nodeHeight","widthHeightRatio","bgWidth","bgHeight","settings","target","firstSource","to","Object","i","arguments","length","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","undefined","enumerable","mergeObjects","width","height","frames","cols","loop","frameTime","fps","reverse","autoplay","draggable","list","result","forEach","value","dataset","toLowerCase","inlineValue","fillInlineSettings","currentFrame","isAnimating","isSwiping","swipeObject","swipePixelsCorrection","plugin","swipeEvents","animateSprite","frame","style","backgroundPosition","xPadding","yPadding","Math","floor","calculatePosition","changeFrame","prevFrame","nextFrame","isOutOfRange","dispatchEvent","Event","abs","stop","getNextFrame","deltaFrames","calculateDuration","animate","time","performance","now","requestAnimationFrame","calculateSizes","wasAnimating","offsetWidth","ceil","backgroundSize","play","swipeHandler","event","touches","curX","pageX","clientX","curY","pageY","clientY","type","preventDefault","document","addEventListener","cursor","body","prevX","prevY","direction","xDist","yDist","r","swipeAngle","atan2","round","PI","swipeDirection","swipeLength","progress","swipeMove","removeEventListener","cb","this","toggle","next","prev","reset","setFrame","setReverse","getCurrentFrame","setOption","option","destroy","removeSwipeEvents","window","setupSwipeEvents"],"mappings":"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"}